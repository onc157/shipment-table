{"version":3,"sources":["utils/storage.ts","api/httpRequest.ts","api/OrdersService.ts","components/Orders/Orders.tsx","components/common/Style.ts","components/Orders/Orders.style.ts","components/common/SelectField/Select.style.ts","components/common/Loader.tsx","components/common/SelectField/SelectField.tsx","components/common/ArchiveField/ArchiveField.tsx","components/common/Button.ts","components/common/DateField/DateField.style.ts","components/common/DateField/DateField.tsx","type/Enums.ts","components/common/InputField/InputField.tsx","components/common/InputField/InputField.style.ts","components/common/SearchField.tsx","components/common/TextField/TextField.style.ts","components/common/TextField/TextField.tsx","constants/statuses.ts","utils/FieldsConfig.ts","components/Orders/Order/Order.tsx","components/Orders/OrdersList.style.tsx","components/Orders/Order/Order.style.ts","components/Orders/OrdersList.tsx","utils/headCells.ts","components/Orders/OrdersTitles.tsx","components/OrdersTab/OrdersTab.style.ts","components/OrdersTab/OrdersTab.tsx","components/Controls/Controls.style.ts","components/NewOrder/NewOrder.style.ts","components/NewOrder/NewOrder.tsx","components/Controls/Controls.tsx","components/Tabs/Tabs.tsx","components/Tabs/Tabs.style.ts","components/Header/Header.style.ts","components/HeaderLogin/HeaderLogin.style.ts","components/HeaderLogin/HeaderLogin.tsx","components/Header/Header.tsx","api/UserService.ts","pages/ShipmentTable/ShipmentTable.tsx","pages/Login/Login.style.ts","pages/Login/Login.tsx","App.tsx","app/store.ts","index.tsx"],"names":["gToken","getGToken","localStorage","getItem","httpRequest","fetchBaseQuery","baseUrl","prepareHeaders","headers","token","set","OrdersService","createApi","reducerPath","baseQuery","tagTypes","endpoints","build","getAllOrders","query","url","transformResponse","response","payload","providesTags","createOrder","mutation","method","body","invalidatesTags","updateOrder","_id","data","useGetAllOrdersQuery","useCreateOrderMutation","useUpdateOrderMutation","Orders","orders","isLoading","OrdersStyled","TableContainer","Table","COLOR_WHITE","COLOR_BLACK","COLOR_BLUE","COLOR_GREY","COLOR_GREEN","styled","div","TableCellStyled","TableCell","InputFields","SelectStyled","Select","Loader","size","color","CircularProgress","TableRow","SelectField","dataValue","name","values","isUpdating","useState","value","setValue","labelId","id","label","onChange","target","updateValue","map","status","MenuItem","ArchiveField","IconButton","onClick","Button","ButtonMaterial","bgcolor","DateFieldStyled","TextField","moment","locale","FieldsName","StatusName","StatusValue","ServiceName","ServiceValue","DateField","date","disabled","open","setOpen","Date","dateValue","setDateValue","handleOpen","prev","ClickAwayListener","onClickAway","style","minWidth","onOpen","mask","newValue","updateDateHandler","renderInput","props","InputField","text","prevValue","setPrevValue","InputFieldStyled","onFocus","onBlur","String","input","fontSize","weight","SearchFieldStyled","TextFieldStyled","SearchField","fullWidth","InputProps","startAdornment","InputAdornment","position","placeholder","variant","span","Statuses","PAID","WORKING","Services","EBAY","SITE","FieldsConfig","isLink","customer","CUSTOMER","item","ITEM","STATUS","orderDate","ORDER_DATE","shipmentDate","SHIPMENT_DATE","serviceName","SERVICE_NAME","serviceOrderNumber","SERVICE_ORDER_NUMBER","WEIGHT","tracking","TRACKING","isArchive","IS_ARCHIVE","Order","orderData","indexNumber","shop","orderNumber","EmptyTextStyles","OrdersList","TableBody","length","order","i","colSpan","headCells","isSorted","width","OrdersTitles","TableHead","elem","OrdersTabStyled","OrdersTab","children","index","other","role","hidden","ControlsStyled","WrapperStyled","form","ItemStyled","ItemButtonStyled","SubmitButtonStyled","NewOrder","isOpen","setIsOpen","validationSchema","yup","required","formik","useFormik","initialValues","now","onSubmit","Dialog","disableEnforceFocus","onClose","handleSubmit","Typography","gutterBottom","handleChange","error","touched","Boolean","errors","helperText","service","setFieldValue","disableFuture","type","Controls","Tabs","React","a11yProps","TabsStyled","event","Tab","HeaderWrapper","AppBar","HeaderTitle","h1","HeaderDescription","HeaderLoginStyled","NameStyled","HeaderLogin","user","Avatar","alt","src","avatar","Header","UserService","getUser","useGetUserQuery","ShipmentTable","removeItem","to","LoginStyled","LoginFormStyled","ButtonStyled","Login","location","useLocation","navigate","useNavigate","isAuthorizing","setAuthorizing","locToken","URLSearchParams","search","get","useEffect","setTimeout","replace","setItem","window","href","App","LocalizationProvider","dateLibInstance","dateAdapter","MomentAdapter","path","element","store","configureStore","reducer","middleware","getDefaultMiddleware","concat","setupListeners","dispatch","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.71aabcc9.chunk.js","sourcesContent":["const gToken = 'gToken'\n\nexport const getGToken = () => localStorage.getItem(gToken)\n\nexport const setGToken = (token: string) => localStorage.setItem(gToken, token)\n\nexport const clearGToken = () => localStorage.removeItem(gToken)\n","import { fetchBaseQuery } from '@reduxjs/toolkit/query/react'\nimport { getGToken } from '../utils/storage'\n\nexport type RTKResponse<T extends any> = {\n    payload: T\n}\n\nexport const httpRequest = fetchBaseQuery({\n    baseUrl: 'https://onc157.ru',\n    prepareHeaders: (headers) => {\n        const token = getGToken()\n\n        if (token) {\n            headers.set('authorization', `Bearer ${token}`)\n        }\n        return headers\n    },\n})\n","import { createApi } from '@reduxjs/toolkit/query/react'\nimport { httpRequest, RTKResponse } from './httpRequest'\nimport { IOrder, IOrders } from '../type/Types'\n\nexport const OrdersService = createApi({\n    reducerPath: 'ordersApi',\n    baseQuery: httpRequest,\n    tagTypes: ['Orders'],\n    endpoints: (build) => ({\n        getAllOrders: build.query<IOrders, void>({\n            query: () => ({ url: 'orders' }),\n            transformResponse: (response: RTKResponse<any>) => response.payload,\n            providesTags: ['Orders'],\n        }),\n        createOrder: build.mutation<IOrder, Partial<IOrder>>({\n            query: ({ ...data }) => ({\n                url: `orders/`,\n                method: 'POST',\n                body: data,\n            }),\n            invalidatesTags: ['Orders'],\n        }),\n        updateOrder: build.mutation<IOrder, Partial<IOrder>>({\n            query: ({ _id, ...data }) => ({\n                url: `orders/${_id}`,\n                method: 'PUT',\n                body: data,\n            }),\n        }),\n    }),\n})\n\nexport const {\n    useGetAllOrdersQuery,\n    useCreateOrderMutation,\n    useUpdateOrderMutation,\n} = OrdersService\n","import { OrdersList, OrdersStyled, OrdersTitles } from './'\nimport { Table, TableContainer } from '@material-ui/core'\nimport { useGetAllOrdersQuery } from '../../api/OrdersService'\n\nexport const Orders = () => {\n    const { data: orders, isLoading } = useGetAllOrdersQuery()\n\n    return (\n        <OrdersStyled>\n            <TableContainer>\n                <Table>\n                    <OrdersTitles />\n                    <OrdersList orders={orders} isLoading={isLoading} />\n                </Table>\n            </TableContainer>\n        </OrdersStyled>\n    )\n}\n","export const COLOR_WHITE = \"#FFFFFF\";\nexport const COLOR_BLACK = \"#3A3B3F\";\n\nexport const COLOR_LIGHT_BLUE = \"#D4E6FF\";\nexport const COLOR_BLUE = \"#1665D8\";\n\nexport const COLOR_LIGHT_GREY = \"#E4E7EB\";\nexport const COLOR_GREY = \"#9EA0A5\";\nexport const COLOR_DARK_GREY = \"#979797\";\nexport const COLOR_GREY_BG = \"#E5E5E5\";\n\nexport const COLOR_GREEN = \"#47B881\";\nexport const COLOR_YELLOW = \"#F7D154\";\nexport const COLOR_RED = \"#EC4C47\";\n\n\n","import styled from 'styled-components';\nimport { TableCell} from '@material-ui/core';\nimport { COLOR_WHITE } from '../common/Style';\n\nexport const OrdersStyled = styled.div`\n  display: flex;\n  width: 100%;\n  background-color: ${COLOR_WHITE};\n`\n\nexport const TableCellStyled = styled(TableCell)`\n  &.MuiTableCell-head {\n    font-weight: 400;\n  }\n`\n\nexport const InputFields = styled.div`\n  display: flex;\n  flex-direction: column;\n  \n  & input:not(:first-child){\n    padding-top: 5px;\n  }\n`","import styled from 'styled-components'\nimport { Select } from '@material-ui/core'\nimport { COLOR_WHITE } from '../Style'\n\nexport const SelectStyled = styled(Select)`\n    .MuiSelect-icon {\n        display: none;\n    }\n    .MuiSelect-select:focus {\n        background-color: ${COLOR_WHITE};\n    }\n`\n","import { CircularProgress, TableCell, TableRow } from '@material-ui/core'\n\ntype TColor = 'inherit' | 'primary' | 'secondary'\n\nexport const Loader = ({ size, color }: { size?: string; color?: TColor }) => {\n    if (size === 'sm') {\n        return <CircularProgress size={'2rem'} color={color ?? 'primary'} />\n    } else {\n        return (\n            <TableRow>\n                <TableCell>\n                    <CircularProgress color={color ?? 'primary'} />\n                </TableCell>\n            </TableRow>\n        )\n    }\n}\n","import * as React from 'react'\nimport { MenuItem } from '@material-ui/core'\nimport { useState } from 'react'\nimport { SelectStyled } from './Select.style'\nimport { useUpdateOrderMutation } from '../../../api/OrdersService'\nimport { Loader } from '../Loader'\nimport { IStatus, IService } from '../../../type/Types'\n\ninterface ISelectField {\n    dataValue?: string\n    _id: string\n    name: string\n    values: Array<IStatus | IService>\n}\n\nexport const SelectField = ({ dataValue, _id, name, values }: ISelectField) => {\n    const [updateOrder, { isLoading: isUpdating }] = useUpdateOrderMutation()\n\n    const [value, setValue] = useState(dataValue)\n\n    const updateValue = (value: string) => {\n        updateOrder({ _id: _id, [name]: value })\n    }\n\n    const handleChange = ({\n        target,\n    }: React.ChangeEvent<{ value: unknown }>) => {\n        setValue(target.value as string)\n        updateValue(target.value as string)\n    }\n\n    return (\n        <>\n            {isUpdating ? (\n                <Loader size={'sm'} />\n            ) : (\n                <SelectStyled\n                    labelId=\"status-select\"\n                    id=\"status-select-id\"\n                    value={value}\n                    label=\"Status\"\n                    onChange={handleChange}\n                >\n                    {values.map((status) => (\n                        <MenuItem value={status.value} key={status.value}>\n                            {status.name}\n                        </MenuItem>\n                    ))}\n                </SelectStyled>\n            )}\n        </>\n    )\n}\n\nexport default SelectField\n","import * as React from 'react'\nimport { IconButton } from '@material-ui/core'\nimport ArchiveOutlinedIcon from '@material-ui/icons/ArchiveOutlined'\nimport { FieldsName } from '../../../type/Enums'\nimport { useUpdateOrderMutation } from '../../../api/OrdersService'\nimport { Loader } from '../Loader'\n\ninterface IArchiveField {\n    _id: string\n    name: FieldsName\n}\n\nexport const ArchiveField = ({ _id, name }: IArchiveField) => {\n    const [updateOrder, { isLoading: isUpdating }] = useUpdateOrderMutation()\n\n    const archiveHandler = () => {\n        updateOrder({ _id: _id, [name]: true })\n    }\n\n    return (\n        <>\n            {isUpdating ? (\n                <Loader size={'sm'} />\n            ) : (\n                <IconButton color=\"primary\" onClick={archiveHandler}>\n                    <ArchiveOutlinedIcon />\n                </IconButton>\n            )}\n        </>\n    )\n}\n","import styled from 'styled-components'\nimport { Button as ButtonMaterial } from '@mui/material'\nimport { COLOR_WHITE } from './Style'\n\nexport const Button = styled(ButtonMaterial)<{\n    bgcolor: string\n}>`\n    &.MuiButton-root {\n        padding: 0 15px;\n        flex-wrap: nowrap;\n        background-color: ${({ bgcolor }) => bgcolor};\n        color: ${COLOR_WHITE};\n        font-weight: 400;\n        border-radius: 6px;\n        box-shadow: 0 1px 1px rgba(0, 0, 0, 0.14), 0 2px 1px rgba(0, 0, 0, 0.12),\n            0 1px 3px rgba(0, 0, 0, 0.2);\n\n        &:hover {\n            background-color: #3e7dd8;\n            box-shadow: none;\n        }\n\n        &:disabled {\n            box-shadow: none;\n        }\n    }\n`\n","import styled from 'styled-components'\nimport { TextField } from '@material-ui/core'\n\nexport const DateFieldStyled = styled(TextField)`\n    .MuiFormHelperText-root {\n        display: none;\n    }\n`\n","import * as React from 'react'\nimport { useState } from 'react'\nimport { useUpdateOrderMutation } from '../../../api/OrdersService'\nimport { Loader } from '../Loader'\nimport { FieldsName } from '../../../type/Enums'\nimport { DateFieldStyled } from './DateField.style'\nimport moment from 'moment'\nimport 'moment/locale/ru'\nimport { DatePicker } from '@material-ui/pickers'\nimport { ClickAwayListener } from '@mui/material'\n\nmoment.locale('ru')\n\ninterface IDateField {\n    date?: Date\n    _id: string\n    name: FieldsName\n    disabled?: boolean\n}\n\nexport const DateField = ({\n    date,\n    _id,\n    name,\n    disabled = false,\n}: IDateField) => {\n    const [updateOrder, { isLoading: isUpdating }] = useUpdateOrderMutation()\n\n    const [open, setOpen] = useState(false)\n    const [dateValue, setDateValue] = useState<Date | null>(\n        date ? new Date(date) : null\n    )\n\n    const updateDateHandler = (date: Date | null) => {\n        if (date) {\n            setDateValue(date)\n            handleOpen()\n            updateOrder({ _id: _id, [name]: date })\n        }\n    }\n\n    const handleOpen = () => {\n        setOpen((prev) => !prev)\n    }\n\n    const handleClickAway = () => {\n        setOpen(false)\n    }\n\n    return (\n        <ClickAwayListener onClickAway={handleClickAway}>\n            <div style={{ minWidth: '140px' }}>\n                {isUpdating ? (\n                    <Loader size={'sm'} />\n                ) : (\n                    <DatePicker\n                        open={open}\n                        onOpen={handleOpen}\n                        value={dateValue}\n                        mask=\"__.__.____\"\n                        onChange={(newValue) => updateDateHandler(newValue)}\n                        renderInput={(props) => <DateFieldStyled {...props} />}\n                        disabled={disabled}\n                    />\n                )}\n            </div>\n        </ClickAwayListener>\n    )\n}\n","export enum FieldsName {\n    CUSTOMER = 'customer',\n    ITEM = 'item',\n    STATUS = 'status',\n    ORDER_DATE = 'orderDate',\n    SHIPMENT_DATE = 'shipmentDate',\n    SERVICE_NAME = 'shop.name',\n    SERVICE_ORDER_NUMBER = 'shop.orderNumber',\n    WEIGHT = 'weight',\n    TRACKING = 'tracking',\n    IS_ARCHIVE = 'isArchive',\n}\n\nexport enum StatusName {\n    PAID = 'Оплачено',\n    WORKING = 'В работе',\n}\n\nexport enum StatusValue {\n    PAID = 'paid',\n    WORKING = 'working',\n}\n\nexport enum ServiceName {\n    EBAY = 'eBay',\n    SITE = 'Сайт',\n}\n\nexport enum ServiceValue {\n    EBAY = 'ebay',\n    SITE = 'site',\n}\n","import * as React from 'react'\nimport { useState } from 'react'\nimport { InputFieldStyled } from '.'\nimport { useUpdateOrderMutation } from '../../../api/OrdersService'\nimport { FieldsName } from '../../../type/Enums'\nimport { Loader } from '../Loader'\n\ninterface InputFieldI {\n    name: FieldsName\n    text?: string | number\n    placeholder?: string\n    isLink: Boolean\n    weight: number\n    color: string\n    fontSize: number\n    _id: string\n}\n\nexport const InputField = (props: InputFieldI) => {\n    const { name, text, _id } = props\n\n    const [value, setValue] = useState(text || '')\n    const [prevValue, setPrevValue] = useState<string | number>('')\n\n    const [updateOrder, { isLoading: isUpdating }] = useUpdateOrderMutation()\n\n    const inputHandler = ({ target }: { target: HTMLInputElement }) => {\n        setValue(target.value)\n    }\n\n    const updateHandler = ({ target }: { target: HTMLInputElement }) => {\n        if (!target.value || target.value === String(prevValue)) {\n            return\n        } else {\n            updateOrder({ _id: _id, [name]: target.value })\n        }\n    }\n\n    return (\n        <>\n            {isUpdating ? (\n                <Loader size={'sm'} />\n            ) : (\n                <InputFieldStyled\n                    value={value}\n                    onFocus={() => setPrevValue(value)}\n                    onChange={inputHandler}\n                    onBlur={updateHandler}\n                    {...props}\n                />\n            )}\n        </>\n    )\n}\n","import styled from 'styled-components'\nimport { COLOR_GREY } from '../Style'\n\ninterface InputFieldStyleI {\n    isLink: Boolean\n    weight: number\n    color: string\n    fontSize: number\n}\n\nexport const InputFieldStyled = styled.input<InputFieldStyleI>`\n    border: none;\n    font-size: ${(props) => props.fontSize};\n    font-weight: ${(props) => props.weight};\n    color: ${(props) => props.color};\n    transition: 0.2s;\n\n    &:focus {\n        color: ${COLOR_GREY};\n        font-weight: 400;\n        font-style: italic;\n        outline: none;\n    }\n    &:hover {\n        color: ${COLOR_GREY};\n        font-style: italic;\n        outline: none;\n    }\n`\n","import { InputAdornment, TextField } from '@material-ui/core';\nimport SearchIcon from '@material-ui/icons/Search';\nimport { COLOR_GREY, COLOR_WHITE } from './Style';\nimport styled from 'styled-components';\n\nconst SearchFieldStyled = styled.div`\n  margin-right: 20px;\n  width: 620px;\n`\n\nconst TextFieldStyled = styled(TextField)`\n  .MuiInputBase-root {\n    height: 36px;\n    background-color: ${COLOR_WHITE};\n  }\n`\n\nexport const SearchField = () => {\n    return (\n        <SearchFieldStyled>\n            <TextFieldStyled\n                fullWidth\n                InputProps={{\n                    startAdornment: (\n                        <InputAdornment position=\"start\">\n                                <SearchIcon style={{ color: COLOR_GREY }} />\n                        </InputAdornment>\n                    )\n                }}\n                placeholder=\"Поиск\"\n                variant=\"outlined\"\n            />\n        </SearchFieldStyled>\n    )\n}","import styled from 'styled-components'\n\ninterface TextFieldStyleI {\n    isLink: Boolean\n    weight: number\n    color: string\n    fontSize: number\n}\n\nexport const TextFieldStyled = styled.span<TextFieldStyleI>`\n    margin-bottom: 30px;\n    font-size: ${(props) => props.fontSize};\n    font-weight: ${(props) => props.weight};\n    color: ${(props) => props.color};\n`\n","import * as React from 'react'\nimport { TextFieldStyled } from './TextField.style'\n\ninterface TextFieldInterface {\n    text: string\n    isLink: Boolean\n    weight: number\n    color: string\n    fontSize: number\n}\n\nexport const TextField = (props: TextFieldInterface) => {\n    const { text } = props\n\n    return <TextFieldStyled {...props}>{text}</TextFieldStyled>\n}\n","import { IService, IStatus } from '../type/Types'\nimport {\n    ServiceName,\n    ServiceValue,\n    StatusName,\n    StatusValue,\n} from '../type/Enums'\n\nexport const Statuses: IStatus[] = [\n    { name: StatusName.PAID, value: StatusValue.PAID },\n    { name: StatusName.WORKING, value: StatusValue.WORKING },\n]\n\nexport const Services: IService[] = [\n    { name: ServiceName.EBAY, value: ServiceValue.EBAY },\n    { name: ServiceName.SITE, value: ServiceValue.SITE },\n]\n","import { COLOR_BLACK, COLOR_BLUE, COLOR_GREY } from '../components/common'\nimport { FieldsName } from '../type/Enums'\nimport { Services, Statuses } from '../constants/statuses'\n\nexport const FieldsConfig = {\n    id: {\n        isLink: false,\n        weight: 400,\n        color: COLOR_BLACK,\n        fontSize: 0.875,\n    },\n    customer: {\n        name: FieldsName.CUSTOMER,\n        isLink: false,\n        weight: 600,\n        color: COLOR_BLACK,\n        fontSize: 1,\n    },\n    item: {\n        name: FieldsName.ITEM,\n        isLink: false,\n        weight: 400,\n        color: COLOR_GREY,\n        fontSize: 0.875,\n    },\n    status: {\n        name: FieldsName.STATUS,\n        values: Statuses,\n    },\n    orderDate: {\n        name: FieldsName.ORDER_DATE,\n        disabled: true,\n    },\n    shipmentDate: {\n        name: FieldsName.SHIPMENT_DATE,\n    },\n    serviceName: {\n        name: FieldsName.SERVICE_NAME,\n        values: Services,\n    },\n    serviceOrderNumber: {\n        name: FieldsName.SERVICE_ORDER_NUMBER,\n        isLink: false,\n        weight: 400,\n        color: COLOR_GREY,\n        fontSize: 0.875,\n    },\n    weight: {\n        name: FieldsName.WEIGHT,\n        isLink: false,\n        weight: 400,\n        color: COLOR_BLACK,\n        fontSize: 1,\n    },\n    tracking: {\n        name: FieldsName.TRACKING,\n        isLink: false,\n        weight: 600,\n        color: COLOR_BLUE,\n        fontSize: 0.875,\n    },\n    isArchive: {\n        name: FieldsName.IS_ARCHIVE,\n    },\n}\n","import { TableCell, TableRow } from '@material-ui/core'\nimport { IOrder } from '../../../type/Types'\nimport { InputFields } from '../index'\nimport { SelectField } from '../../common/SelectField'\nimport { FieldsConfig } from '../../../utils/FieldsConfig'\nimport {\n    ArchiveField,\n    DateField,\n    InputField,\n    Loader,\n    TextField,\n} from '../../common'\n\nexport const Order = ({\n    orderData,\n    isLoading,\n}: {\n    orderData: IOrder\n    isLoading: boolean\n}) => {\n    return (\n        <>\n            {isLoading ? (\n                <Loader />\n            ) : (\n                <TableRow>\n                    <TableCell>\n                        <TextField\n                            text={orderData.indexNumber}\n                            {...FieldsConfig.id}\n                        />\n                    </TableCell>\n                    <TableCell>\n                        <InputField\n                            text={orderData.customer}\n                            _id={orderData._id}\n                            {...FieldsConfig.customer}\n                        />\n                    </TableCell>\n                    <TableCell>\n                        <InputField\n                            text={orderData.item}\n                            _id={orderData._id}\n                            {...FieldsConfig.item}\n                        />\n                    </TableCell>\n                    <TableCell>\n                        <SelectField\n                            dataValue={orderData.status}\n                            _id={orderData._id}\n                            {...FieldsConfig.status}\n                        />\n                    </TableCell>\n                    <TableCell>\n                        <DateField\n                            date={orderData.orderDate}\n                            _id={orderData._id}\n                            {...FieldsConfig.orderDate}\n                        />\n                        <DateField\n                            date={orderData.shipmentDate}\n                            _id={orderData._id}\n                            {...FieldsConfig.shipmentDate}\n                        />\n                    </TableCell>\n                    <TableCell>\n                        <InputFields>\n                            <SelectField\n                                dataValue={orderData.shop?.name}\n                                _id={orderData._id}\n                                {...FieldsConfig.serviceName}\n                            />\n                            <InputField\n                                text={orderData.shop?.orderNumber}\n                                _id={orderData._id}\n                                {...FieldsConfig.serviceOrderNumber}\n                            />\n                        </InputFields>\n                    </TableCell>\n                    <TableCell>\n                        <InputField\n                            _id={orderData._id}\n                            text={orderData.weight}\n                            {...FieldsConfig.weight}\n                        />\n                    </TableCell>\n                    <TableCell>\n                        <InputField\n                            _id={orderData._id}\n                            text={orderData.tracking}\n                            {...FieldsConfig.tracking}\n                        />\n                    </TableCell>\n                    <TableCell>\n                        <ArchiveField\n                            _id={orderData._id}\n                            {...FieldsConfig.isArchive}\n                        />\n                    </TableCell>\n                </TableRow>\n            )}\n        </>\n    )\n}\n","import styled from 'styled-components'\nimport { TableCell } from '@material-ui/core'\nimport { COLOR_WHITE } from '../common'\n\nexport const EmptyTextStyles = styled(TableCell)`\n    border-radius: 20px;\n\n    &.MuiTableCell-body {\n        padding: 40px;\n        font-size: 1.25rem;\n        color: ${COLOR_WHITE};\n        text-align: center;\n        filter: ;\n        background: linear-gradient(\n            90deg,\n            rgba(37, 219, 180, 1) 0%,\n            rgba(63, 81, 181, 1) 47%,\n            rgba(37, 219, 180, 1) 100%\n        );\n    }\n`\n","import styled from 'styled-components';\nimport { TableCell } from '@material-ui/core';\n\nexport const OrdersStyled = styled.div`\n`\n\nexport const TableCellStyled = styled(TableCell)`\n`","import { TableBody, TableRow } from '@material-ui/core'\nimport { Order } from './Order'\nimport { IOrders } from '../../type/Types'\nimport { Loader } from '../common'\nimport { EmptyTextStyles } from './OrdersList.style'\n\nexport const OrdersList = ({\n    orders,\n    isLoading,\n}: {\n    orders: IOrders\n    isLoading: boolean\n}) => {\n    return (\n        <TableBody>\n            {isLoading ? (\n                <Loader />\n            ) : !orders?.length ? (\n                <TableRow>\n                    <EmptyTextStyles colSpan={9}>\n                        Не бойся! Создай свой первый заказа! Это ведь так\n                        просто!\n                    </EmptyTextStyles>\n                </TableRow>\n            ) : (\n                orders?.map((order, i) => (\n                    <Order orderData={order} key={i} isLoading={isLoading} />\n                ))\n            )}\n        </TableBody>\n    )\n}\n","export const headCells = [\n    {\n        name: 'ID заказа',\n        isSorted: true,\n        width: '100%',\n    },\n    {\n        name: 'Покупатель',\n        isSorted: false,\n        width: '100%',\n    },\n    {\n        name: 'Изделие',\n        isSorted: false,\n        width: '100%',\n    },\n    {\n        name: 'Статус',\n        isSorted: true,\n        width: '100%',\n    },\n    {\n        name: 'Оплата / Отгрузка',\n        isSorted: false,\n        width: '100%',\n    },\n    {\n        name: 'Площадка / Номер заказа',\n        isSorted: false,\n        width: '100%',\n    },\n    {\n        name: 'Вес, гр',\n        isSorted: true,\n        width: '100%',\n    },\n    {\n        name: 'Трек-номер',\n        isSorted: false,\n        width: '100%',\n    },\n    {\n        name: 'В архив',\n        isSorted: false,\n        width: '100%',\n    },\n]\n","import {FC} from \"react\";\nimport { TableHead, TableRow } from '@material-ui/core';\nimport { headCells } from '../../utils';\nimport { TableCellStyled } from './Orders.style';\n\nexport const OrdersTitles: FC = () => {\n    return (\n        <TableHead>\n            <TableRow>\n                {headCells.map((elem, i) =>\n                    <TableCellStyled key={i + elem.name}>\n                        {elem.name}\n                    </TableCellStyled>\n                )}\n            </TableRow>\n        </TableHead>\n    )\n}","import styled from 'styled-components';\n\nexport const OrdersTabStyled = styled.div`\n  display: flex\n`","import React from 'react'\nimport { Orders } from '../Orders'\nimport { OrdersTabStyled } from './OrdersTab.style'\n\ninterface OrdersTabProps {\n    children?: React.ReactNode\n    index: any\n    value: any\n}\n\nexport const OrdersTab = (props: OrdersTabProps) => {\n    const { children, value, index, ...other } = props\n\n    return (\n        <OrdersTabStyled\n            role=\"tabpanel\"\n            hidden={value !== index}\n            id={`simple-tabpanel-${index}`}\n            aria-labelledby={`simple-tab-${index}`}\n            {...other}\n        >\n            {value === index && <Orders />}\n        </OrdersTabStyled>\n    )\n}\n","import styled from 'styled-components';\n\nexport const ControlsStyled = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 30px;\n`","import styled from 'styled-components'\nimport { Button, Select, TextField } from '@material-ui/core'\nimport { COLOR_BLUE, COLOR_WHITE } from '../common'\n\nexport const WrapperStyled = styled.form`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    padding: 70px 130px 80px 100px;\n\n    & > .MuiFormControl-root {\n        margin: 10px 0;\n    }\n\n    & h5 {\n        margin-bottom: 20px;\n    }\n`\n\nexport const ItemStyled = styled.div`\n    position: relative;\n`\n\nexport const ItemButtonStyled = styled(Button)`\n    &.MuiButton-root {\n        position: absolute;\n        content: '';\n        left: calc(100% + 10px);\n        top: 0;\n        height: 100%;\n        max-height: 56px;\n        background-color: ${COLOR_BLUE};\n\n        &:hover {\n            background-color: #3e7dd8;\n            box-shadow: none;\n        }\n    }\n`\n\nexport const SubmitButtonStyled = styled(Button)`\n    &.MuiButton-root {\n        margin-top: 20px;\n        background-color: ${COLOR_BLUE};\n\n        &:hover {\n            background-color: #3e7dd8;\n            box-shadow: none;\n        }\n    }\n`\n\nexport const TextFieldStyled = styled(TextField)`\n    width: 360px;\n`\n\nexport const SelectStyled = styled(Select)`\n    margin-top: 10px;\n\n    .MuiSelect-icon {\n        display: none;\n    }\n\n    .MuiSelect-select:focus {\n        background-color: ${COLOR_WHITE};\n    }\n`\n","import React, { useState } from 'react'\nimport { useFormik } from 'formik'\nimport * as yup from 'yup'\nimport { Button } from '../common'\nimport { Dialog, MenuItem, Typography } from '@material-ui/core'\nimport { COLOR_BLUE } from '../common'\nimport {\n    ItemButtonStyled,\n    ItemStyled,\n    SubmitButtonStyled,\n    TextFieldStyled,\n    WrapperStyled,\n    SelectStyled,\n} from './NewOrder.style'\nimport { useCreateOrderMutation } from '../../api/OrdersService'\nimport { DatePicker } from '@material-ui/pickers'\nimport { Services } from '../../constants/statuses'\nimport { ServiceValue } from '../../type/Enums'\n\nexport const NewOrder = () => {\n    const [createOrder] = useCreateOrderMutation()\n\n    const [isOpen, setIsOpen] = useState(false)\n\n    const handleOpen = () => setIsOpen(true)\n    const handleClose = () => setIsOpen(false)\n\n    const validationSchema = yup.object({\n        customer: yup.string().required('Введите имя'),\n        item: yup.string().required('Добавьте товар'),\n        shop: yup.object({\n            orderNumber: yup.string().required('Введите номер заказа'),\n        }),\n    })\n\n    const formik = useFormik({\n        initialValues: {\n            shop: {\n                orderNumber: '',\n                name: ServiceValue.EBAY,\n            },\n            customer: '',\n            item: '',\n            orderDate: Date.now(),\n        },\n        validationSchema: validationSchema,\n        onSubmit: (values: any) => {\n            // alert(JSON.stringify(values, null, 2))\n            createOrder(values)\n        },\n    })\n\n    return (\n        <>\n            <Button bgcolor={COLOR_BLUE} onClick={handleOpen}>\n                + Новый заказ\n            </Button>\n            <Dialog disableEnforceFocus open={isOpen} onClose={handleClose}>\n                <WrapperStyled onSubmit={formik.handleSubmit}>\n                    <Typography variant=\"h5\" gutterBottom>\n                        Новый заказ\n                    </Typography>\n                    <TextFieldStyled\n                        id=\"customer\"\n                        name=\"customer\"\n                        label=\"ФИО\"\n                        variant=\"outlined\"\n                        value={formik.values.customer}\n                        onChange={formik.handleChange}\n                        error={\n                            formik.touched.customer &&\n                            Boolean(formik.errors.customer)\n                        }\n                        helperText={\n                            formik.touched.customer && formik.errors.customer\n                        }\n                    />\n                    <ItemStyled>\n                        <TextFieldStyled\n                            id=\"item\"\n                            name=\"item\"\n                            label=\"Товар\"\n                            variant=\"outlined\"\n                            value={formik.values.item}\n                            onChange={formik.handleChange}\n                            error={\n                                formik.touched.item &&\n                                Boolean(formik.errors.item)\n                            }\n                            helperText={\n                                formik.touched.item && formik.errors.item\n                            }\n                        />\n                        <ItemButtonStyled color=\"primary\" variant=\"contained\">\n                            +\n                        </ItemButtonStyled>\n                    </ItemStyled>\n                    <SelectStyled\n                        fullWidth\n                        id=\"shop.name\"\n                        name=\"shop.name\"\n                        variant=\"outlined\"\n                        value={formik.values.shop.name}\n                        onChange={formik.handleChange}\n                    >\n                        {Services.map((service) => (\n                            <MenuItem value={service.value} key={service.value}>\n                                {service.name}\n                            </MenuItem>\n                        ))}\n                    </SelectStyled>\n                    <TextFieldStyled\n                        id=\"shop.orderNumber\"\n                        name=\"shop.orderNumber\"\n                        label=\"Номер заказа\"\n                        variant=\"outlined\"\n                        value={formik.values.shop.orderNumber}\n                        onChange={formik.handleChange}\n                        error={\n                            formik.touched.shop?.orderNumber &&\n                            Boolean(formik.errors.shop?.orderNumber)\n                        }\n                        helperText={\n                            formik.touched.shop?.orderNumber &&\n                            formik.errors.shop?.orderNumber\n                        }\n                    />\n                    <DatePicker\n                        label=\"Дата оплаты\"\n                        value={formik.values.orderDate}\n                        onChange={(value) => {\n                            formik.setFieldValue('orderDate', value, false)\n                        }}\n                        mask=\"__.__.____\"\n                        disableFuture\n                        renderInput={(props) => (\n                            <TextFieldStyled\n                                {...props}\n                                name=\"orderDate\"\n                                variant=\"outlined\"\n                                helperText={null}\n                            />\n                        )}\n                    />\n                    <SubmitButtonStyled\n                        color=\"primary\"\n                        variant=\"contained\"\n                        fullWidth\n                        type=\"submit\"\n                    >\n                        СОЗДАТЬ ЗАКАЗ\n                    </SubmitButtonStyled>\n                </WrapperStyled>\n            </Dialog>\n        </>\n    )\n}\n","import { SearchField } from '../common'\nimport React from 'react'\nimport { ControlsStyled } from './Controls.style'\nimport { NewOrder } from '../NewOrder/NewOrder'\n\nconst Controls = () => {\n    return (\n        <ControlsStyled>\n            <SearchField />\n            <NewOrder />\n        </ControlsStyled>\n    )\n}\n\nexport default Controls\n","import { Tab } from '@material-ui/core'\nimport { OrdersTab } from '../OrdersTab'\nimport React from 'react'\nimport Controls from '../Controls/Controls'\nimport { TabsStyled, WrapperStyled } from './'\n\nexport const Tabs = () => {\n    const [value, setValue] = React.useState(0)\n\n    const a11yProps = (index: number) => {\n        return {\n            id: `wrapped-tab-${index}`,\n            'aria-controls': `wrapped-tabpanel-${index}`,\n        }\n    }\n\n    const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\n        setValue(newValue)\n    }\n\n    return (\n        <WrapperStyled>\n            <TabsStyled\n                value={value}\n                onChange={handleChange}\n                aria-label=\"simple tabs example\"\n            >\n                <Tab label=\"Текущие заказы\" {...a11yProps(0)} />\n                <Tab label=\"Архив\" {...a11yProps(1)} />\n            </TabsStyled>\n            <Controls />\n            <OrdersTab value={value} index={0}>\n                Item One\n            </OrdersTab>\n        </WrapperStyled>\n    )\n}\n","import styled from 'styled-components'\nimport { Tabs } from '@material-ui/core'\nimport { COLOR_BLUE, COLOR_LIGHT_GREY } from '../common'\n\nexport const WrapperStyled = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    padding: 0 4%;\n    height: 100%;\n`\n\nexport const TabsStyled = styled(Tabs)`\n    margin-bottom: 30px;\n    border-bottom: 1px solid ${COLOR_LIGHT_GREY};\n\n    .MuiTab-root.Mui-selected {\n        color: ${COLOR_BLUE};\n    }\n\n    .MuiTabs-indicator {\n        background-color: ${COLOR_BLUE};\n    }\n`\n","import { AppBar } from '@material-ui/core';\nimport styled from 'styled-components';\n\nexport const HeaderWrapper = styled(AppBar)`\n  &.MuiAppBar-root {\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    align-items: baseline;\n    padding: 2px 4%;\n    margin-bottom: 30px;\n  }\n`\n\nexport const HeaderTitle = styled.h1`\n  margin-right: 15px;\n`\n\nexport const HeaderDescription = styled.div`\n  flex-grow: 1;\n  font-size: 0.75rem;\n  font-weight: 300;\n`","import styled from 'styled-components'\n\nexport const HeaderLoginStyled = styled.div`\n    display: flex;\n    align-items: center;\n`\nexport const NameStyled = styled.div`\n    margin-right: 20px;\n`\n","import { HeaderLoginStyled, NameStyled } from './HeaderLogin.style'\nimport { Loader } from '../common'\nimport { Avatar } from '@mui/material'\nimport { IUser } from '../../type/Types'\n\ninterface IHeaderLogin {\n    user: {\n        data?: IUser\n        isLoading: boolean\n    }\n}\n\nconst HeaderLogin = ({ user }: IHeaderLogin) => {\n    return (\n        <HeaderLoginStyled>\n            {user.isLoading ? (\n                <Loader size=\"sm\" color=\"secondary\" />\n            ) : (\n                <>\n                    <NameStyled>{user.data?.name}</NameStyled>\n                    <Avatar alt=\"Сеня\" src={user.data?.avatar} />\n                </>\n            )}\n        </HeaderLoginStyled>\n    )\n}\n\nexport default HeaderLogin\n","import { HeaderWrapper, HeaderTitle, HeaderDescription } from './Header.style'\nimport React from 'react'\nimport HeaderLogin from '../HeaderLogin/HeaderLogin'\nimport { IUser } from '../../type/Types'\n\ninterface IHeader {\n    user: {\n        data?: IUser\n        isLoading: boolean\n    }\n}\n\nconst Header = ({ user }: IHeader) => {\n    return (\n        <HeaderWrapper position=\"static\">\n            <HeaderTitle>KROTOV.PRO</HeaderTitle>\n            <HeaderDescription>Shipment Table</HeaderDescription>\n            <HeaderLogin user={user} />\n        </HeaderWrapper>\n    )\n}\n\nexport default Header\n","import { createApi } from '@reduxjs/toolkit/query/react'\nimport { httpRequest, RTKResponse } from './httpRequest'\nimport { IUser } from '../type/Types'\n\nconst email = 'polihut@gmail.com'\n\nexport const UserService = createApi({\n    reducerPath: 'userApi',\n    baseQuery: httpRequest,\n    tagTypes: ['User'],\n    endpoints: (build) => ({\n        getUser: build.query<IUser, void>({\n            query: () => ({ url: `user/${email}` }),\n            transformResponse: (response: RTKResponse<any>) =>\n                response.payload[0],\n            providesTags: ['User'],\n        }),\n    }),\n})\n\nexport const { useGetUserQuery } = UserService\n","import { Tabs } from '../../components/Tabs'\nimport Header from '../../components/Header/Header'\nimport React from 'react'\nimport { clearGToken, getGToken } from '../../utils/storage'\nimport { Navigate } from 'react-router-dom'\nimport { useGetUserQuery } from '../../api/UserService'\n\nexport const ShipmentTable = () => {\n    const { data, isLoading } = useGetUserQuery()\n\n    if (!isLoading && !data) {\n        clearGToken()\n    }\n\n    if (!getGToken()) {\n        return <Navigate to=\"/login\" />\n    }\n\n    return (\n        <>\n            <Header user={{ data, isLoading }} />\n            <Tabs />\n        </>\n    )\n}\n","import styled from 'styled-components'\nimport { Button } from '@material-ui/core'\nimport {\n    COLOR_GREEN,\n    COLOR_GREY_BG,\n    COLOR_WHITE,\n} from '../../components/common'\n\nexport const LoginStyled = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    height: 100vh;\n    background-color: ${COLOR_GREY_BG};\n`\n\nexport const LoginFormStyled = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    padding: 90px 60px;\n    border-radius: 10px;\n    background-color: ${COLOR_WHITE};\n\n    & > :not(:last-child) {\n        margin-bottom: 25px;\n    }\n`\n\nexport const ButtonStyled = styled(Button)`\n    &.MuiButton-root {\n        min-width: 360px;\n        background-color: ${COLOR_GREEN};\n        color: ${COLOR_WHITE};\n        transition: 0.4s;\n\n        &:hover {\n            background-color: ${COLOR_GREEN};\n            filter: brightness(1.1);\n            box-shadow: none;\n        }\n    }\n`\n","import { LoginStyled, LoginFormStyled, ButtonStyled } from './Login.style'\nimport { Typography } from '@material-ui/core'\nimport React, { useEffect, useState } from 'react'\nimport { useLocation, useNavigate } from 'react-router-dom'\nimport { getGToken, setGToken } from '../../utils/storage'\n\nexport const Login = () => {\n    const location = useLocation()\n    const navigate = useNavigate()\n    const [isAuthorizing, setAuthorizing] = useState(false)\n\n    const locToken = new URLSearchParams(location.search).get('token')\n\n    useEffect(() => {\n        if (locToken || getGToken()) {\n            setAuthorizing(true)\n        }\n    }, [setAuthorizing, locToken])\n\n    useEffect(() => {\n        if (getGToken() && isAuthorizing) {\n            setTimeout(() => {\n                navigate('/', { replace: true })\n            }, 1500)\n        }\n    }, [navigate, isAuthorizing])\n\n    useEffect(() => {\n        if (locToken && !getGToken()) {\n            setGToken(locToken)\n            setAuthorizing(true)\n        }\n    }, [setAuthorizing, locToken])\n\n    const loginGoogle = () => {\n        window.location.href = 'https://onc157.ru/auth/google'\n    }\n\n    return (\n        <LoginStyled>\n            <LoginFormStyled>\n                <Typography variant=\"h5\" gutterBottom>\n                    Вход\n                </Typography>\n                {isAuthorizing ? (\n                    <Typography>УСПЕШНАЯ АВТОРИЗАЦИЯ!</Typography>\n                ) : (\n                    <ButtonStyled fullWidth onClick={loginGoogle}>\n                        Войти через google\n                    </ButtonStyled>\n                )}\n            </LoginFormStyled>\n        </LoginStyled>\n    )\n}\n","import React from 'react'\nimport './App.scss'\nimport { ShipmentTable } from './pages/ShipmentTable'\nimport { Login } from './pages/Login'\nimport MomentAdapter from '@material-ui/pickers/adapter/moment'\nimport { LocalizationProvider } from '@material-ui/pickers'\nimport moment from 'moment'\nimport { BrowserRouter, Navigate, Route, Routes } from 'react-router-dom'\n\nfunction App() {\n    return (\n        <>\n            <LocalizationProvider\n                dateLibInstance={moment}\n                dateAdapter={MomentAdapter}\n                locale=\"ru\"\n            >\n                <BrowserRouter>\n                    <Routes>\n                        <Route path=\"/\" element={<ShipmentTable />} />\n                        <Route path=\"/login\" element={<Login />} />\n                        <Route path=\"*\" element={<Navigate to=\"/\" replace />} />\n                    </Routes>\n                </BrowserRouter>\n            </LocalizationProvider>\n        </>\n    )\n}\n\nexport default App\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit'\nimport { OrdersService } from '../api/OrdersService'\nimport { setupListeners } from '@reduxjs/toolkit/query'\nimport { UserService } from '../api/UserService'\n\nexport const store = configureStore({\n    reducer: {\n        [OrdersService.reducerPath]: OrdersService.reducer,\n        [UserService.reducerPath]: UserService.reducer,\n    },\n    middleware: (getDefaultMiddleware) =>\n        getDefaultMiddleware()\n            .concat(OrdersService.middleware)\n            .concat(UserService.middleware),\n})\n\nsetupListeners(store.dispatch)\n\nexport type AppDispatch = typeof store.dispatch\nexport type RootState = ReturnType<typeof store.getState>\n\nexport type AppThunk<ReturnType = void> = ThunkAction<\n    ReturnType,\n    RootState,\n    unknown,\n    Action<string>\n>\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}